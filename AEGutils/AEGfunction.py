#-*- coding:utf-8 -*-

from AEGcommon import printf
from AEGconfig import *
import idc
import idaapi 
import idautils
from idc import *

def AEG_GetAllFunctions():
	return idautils.Functions()

def AEG_GetFuncName(func_addr):
	return idc.GetFunctionName(func_addr)

def AEG_GetFuncArgs(addr , num = None):
	args = idaapi.get_arg_addrs(addr)
	if num is None:		
		return args
	return args[ num - 1 ]

def AEG_GetFunctionHead(addr):
	'''
	给定一个地址，得到这个地址所在的函数的开始地址
	'''
	return GetFunctionAttr(addr, idc.FUNCATTR_START)
	

def PrintFuncs(funcs,end = '\n'):
	_t = funcs
	#print(type(_t))
	if not isinstance(_t , (list,tuple) ) :
		_t = [_t]
	for tmp in _t :
		printf("%x - %s" % (tmp.addr, tmp.name) , end = end)


class DangerFuncsPreset(object):
	def __init__(self):
		from AEGconfig import DANGER_FUNCS_FILE ,WORKING_DIR
		import json , os
		_tpath = os.path.join( WORKING_DIR ,"config", DANGER_FUNCS_FILE)
		#printf("dangerous func file path:%s" % _tpath , verbose=LOG_LEVEL_DEBUG )
		with open( _tpath, 'r') as f:
			self.FUNCS = json.loads(f.read())
			if len(self.FUNCS) > 0 :
				printf("Load dangerous funcs successfully!" , verbose=LOG_LEVEL_DEBUG)
			else :
				printf("Load dangerous funcs failed" , verbose=LOG_LEVEL_ERR , output_to_file=True)
	def GetFuncs(self):
		return self.FUNCS
	
class DangerousFuncs(object) :
	def __init__(self, addr , func_name ,attr_dict):
		self.name = func_name
		self.addr = addr
		for i in attr_dict.keys():
			setattr(self , i , attr_dict[i])
	def __repr__(self):
		return "%x %s " % (self.addr , self.name)
	def __str__(self):
		return "%x %s " % (self.addr , self.name)

def AEG_GetDangerousFunctions(type_constrain = None):
	ret= []
	preset = DangerFuncsPreset().GetFuncs()
	for func in AEG_GetAllFunctions():
		if preset.has_key(AEG_GetFuncName(func)):
			if type_constrain :
				if preset[AEG_GetFuncName(func)]['type'] == type_constrain:
					ret.append(func)
			else:
				ret.append(func)
		pass
	if len(ret): 
		ret = list(set(ret))
		funcname_list = map(AEG_GetFuncName , ret)
		return map(DangerousFuncs , 
					ret , 
					funcname_list , 
					list(preset[i] for i in funcname_list)
					)
	else :
		printf("No Danger funcs found in given binary." ,verbose=LOG_LEVEL_INFO)
		return None
	return ret