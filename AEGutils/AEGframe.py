#-*- coding:utf-8 -*-
from AEGcommon import printf
from idc import *
from AEGconfig import *
from AEGinfo import *
from tempfile import NamedTemporaryFile
from AEGagent import gdb_agent
def get_stack_arg_offset( addr, arg , base = None):
	'''
	Refernce : https://gist.github.com/syndrowm/2968620
	'''
	stack = GetFrame(addr)
	size = GetStrucSize(stack)
	
	names = []
	for i in range(size):
		n = GetMemberName(stack , i) 
		if n and not n in names :
			names.append(n)
	#printf(arg , verbose=LOG_LEVEL_DEBUG)

	printf('names: %s' % names , verbose=LOG_LEVEL_DEBUG)
	if ' s' in names and arg in names :
		offset = GetMemberOffset(stack , arg) - GetMemberOffset(stack ,' s')
		if base :
			return GetRegValue(base) + offset
		else:
			return offset
	
	return None

offset_SP2BP = None

def Getoffset_SP2BP(addr , gdb_script = None):
	'''
	运行一次gdb得到 $sp - $bp 的偏移。相当于一次动态调试
	注意：这里默认可以直接运行到指定栈帧。如果有其他条件（TODO）
	'''
	global offset_SP2BP
	if offset_SP2BP is not None:
		return offset_SP2BP
	if gdb_script is None:
		_gdb_script = '''b *0x%x\nr\nset logging file gdboutput.txt\nset logging on\np/x $%ssp\np/x $%sbp\nset logging off\n'''
	else:
		_gdb_script = gdb_script
	f = NamedTemporaryFile(dir=INFO_INPUT_FILEPATH ,delete=False)
	_prefix = 'e' if INFO_BITS == 32 else 'r'
	f.write(_gdb_script % ( addr , _prefix , _prefix) )
	f.close()
	#printf("%s , %s" % (f.name , os.path.basename(f.name)) , verbose = LOG_LEVEL_DEBUG )
	
	gdb_agent(os.path.basename(f.name))

	os.remove(f.name)
	with open('gdboutput.txt','r') as f2:
		lines = f2.read().split('\n')
		sp = int(lines[0].split('=')[1].strip() , base=16)
		bp = int(lines[1].split('=')[1].strip(),base = 16)
		offset = bp - sp 
		offset_SP2BP = offset
		printf("calc offset SP 2 BP : %d" % offset)
		return offset