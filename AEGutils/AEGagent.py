#-*- coding:utf-8 -*-

'''
Agents for common commands(e.g. cross-system function call, pwntools function)

'''

import subprocess
from AEGcommon import printf
from AEGconfig import LOG_LEVEL_DEBUG,LOG_LEVEL_ERR
from AEGinfo import *
import subprocess
import os
from tempfile import NamedTemporaryFile

def command_agent(cmd):
	if INFO_SYSTEM == 'windows':
		cmd = 'wsl -- ' + cmd 
	proc= subprocess.Popen(cmd , stderr=subprocess.PIPE , stdout = subprocess.PIPE,shell = True)
	out , err = proc.communicate()

	if err.strip() != '':
		printf(err ,verbose=LOG_LEVEL_ERR)
		#raise  FatalErrorException()
	
	return out


def angr_agent(process_name , target):
	angr_template = '''import angr
import os
p = angr.Project('{}' , auto_load_libs = True)
simgr = p.factory.simulation_manager(p.factory.full_init_state())
simgr.explore(find=0x{:x})
print (simgr.found[0].posix.dumps(0).decode('latin1').strip('\\0'))'''
	f = NamedTemporaryFile(dir=INFO_INPUT_FILEPATH ,delete=False, suffix='py')
	f.write(angr_template.format(process_name , target ))
	f.close()

	cmd = 'python3 %s' % os.path.basename(f.name)
	out = command_agent(cmd)
	os.remove(f.name)

	return out
def pwntools_agent(cmd):
	
	cmd = cmd.replace('"' , '\\"')
	cmd = 'python -c "from pwn import *;%s"' % cmd
	#printf("PWNTOOLS AGENT got cmd:%s" % cmd , verbose=LOG_LEVEL_DEBUG)
	out = command_agent(cmd)
	printf(out , verbose=LOG_LEVEL_DEBUG)
	return out.strip('\n')

def ROPGadget_agent(filename = INFO_INPUT_FILENAME , addition_cmd = ''):
	cmd = "ROPgadget --binary=%s %s" % (filename , addition_cmd)
	#cmd = cmd.replace('"' , '\\"')
	out = command_agent(cmd)
	#printf(err , verbose=LOG_LEVEL_DEBUG)
	return out.split("\n")[2:]


def gdb_agent(gdb_script = None ):
	if os.path.exists('gdboutput.txt'):
		os.remove('gdboutput.txt')
	if gdb_script is not None :
		f = NamedTemporaryFile(dir=INFO_INPUT_FILEPATH ,delete=False)
		f.write(gdb_script)
		script_name = os.path.basename(f.name)
		f.close()
	else:
		script_name = "gdbscript.txt"
	cmd = "gdb --nx --quiet --command={command} {filename} ".format(command = script_name , filename = INFO_INPUT_FILENAME)
	out = command_agent(cmd)
	if script_name != "gdbscript.txt":
		os.remove(script_name)
	return out

def maps_agent(process_name = INFO_INPUT_FILENAME):
	'''
		读取一个程序的 /proc/{pid}/maps
		可用于确定栈范围、bss段可执行权限、libc代码地址的范围
	'''
	cmd = 'p = process("%s");import os;os.system("cat /proc/"+str(pidof(p)).strip("[").strip("]")+"/maps")' \
		% INFO_INPUT_FILENAME
	out = pwntools_agent(cmd)
	#printf(out , verbose = LOG_LEVEL_DEBUG)
	return out